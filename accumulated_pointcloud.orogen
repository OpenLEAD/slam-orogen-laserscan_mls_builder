name "accumulated_pointcloud"
version "0.1"

using_library 'envire'

import_types_from "base"
import_types_from 'envire'

task_context "Task" do

    property('envire_period', 'double', 1.0).
        doc 'update period in s for the envire_data port.'
    property('envire_path', 'string', "").
        doc 'enter a path if the environment should be saved'
        
    ## MLS Grid properies ##
    property('show_mls_grid', 'bool', false).
        doc 'show a mls grid instead of a pointcloud'
    property('grid_size_x', 'double', 10.0).
        doc 'x size of the grid in meter'
    property('grid_size_y', 'double', 10.0).
        doc 'y size of the grid in meter'
    property('cell_resolution_x', 'double', 0.02).
        doc 'x cell resolution in meter'
    property('cell_resolution_y', 'double', 0.02).
        doc 'y cell resolution in meter'

    input_port("laserscan", "base::samples::LaserScan").
        needs_reliable_connection.
        doc 'laser scans'

    output_port('point_cloud', '/base/samples/Pointcloud')
   
    output_port('envire_data', ro_ptr('std/vector</envire/BinaryEvent>'))

    ##########################
    # transformer parameters
    ##########################
    transformer do
        transformation("laser", "world")
        align_port('laserscan', 0.4)
        max_latency(3.0)
    end

    port_driven "laserscan"
end

deployment "accumulated_pointcloud_test" do
    # This is a test deployment that should not be installed
    do_not_install

    task("accumulated_pointcloud", "Task")
end

